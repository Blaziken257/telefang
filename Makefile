.PHONY: all compare_power compare_speed clean power speed

.SUFFIXES:
.SUFFIXES: .asm .o .gbc .png
.SECONDEXPANSION:

# Build Telefang.
ROMS_POWER := telefang_pw.gbc
BASEROM_POWER := baserom_pw.gbc
ROMS_SPEED := telefang_sp.gbc
BASEROM_SPEED := baserom_sp.gbc
OBJS := main.o wram.o components/compression/malias.o \
	  components/lcdc/vblank_irq.o components/lcdc/hblank_irq.o \
	  components/lcdc/oam_dma.o components/lcdc/shadow_regs.o \
	  components/lcdc/sprite_compose.o components/lcdc/memory.o \
	  components/system/main.o components/system/state_machine.o \
	  components/system/rst.o components/mainscript/state_machine.o \
	  components/system/memory.o \
	  components/mainscript/ccinterpreter.o components/mainscript/utility.o \
	  components/mainscript/font.o components/mainscript/draw_text.o
OBJS_POWER := versions/power/compressed_gfx.o versions/power/extra_gfx.o
OBJS_SPEED := versions/speed/compressed_gfx.o versions/speed/extra_gfx.o
OBJS_ALL := ${OBJS} ${OBJS_POWER} ${OBJS_SPEED}

# If your default python is 3, you may want to change this to python27.
PYTHON := python
PRET := pokemon-reverse-engineering-tools/pokemontools

$(foreach obj, $(OBJS), \
	$(eval $(obj:.o=)_dep := $(shell $(PYTHON) $(PRET)/scan_includes.py $(obj:.o=.asm))) \
)

$(foreach obj, $(OBJS_POWER), \
	$(eval $(obj:.o=)_dep := $(shell $(PYTHON) $(PRET)/scan_includes.py $(obj:.o=.asm))) \
)

$(foreach obj, $(OBJS_SPEED), \
	$(eval $(obj:.o=)_dep := $(shell $(PYTHON) $(PRET)/scan_includes.py $(obj:.o=.asm))) \
)

# Link objects together to build a rom.
all: power speed

power: $(ROMS_POWER) compare_power

speed: $(ROMS_SPEED) compare_speed

# Assemble source files into objects.
# Use rgbasm -h to use halts without nops.
$(OBJS_ALL): $$*.asm $$($$*_dep)
	@$(PYTHON) $(PRET)/gfx.py 2bpp $(2bppq)
	@$(PYTHON) $(PRET)/gfx.py 1bpp $(1bppq)
	@$(PYTHON) $(PRET)/pcm.py pcm $(pcmq)
	rgbasm -h -o $@ $<

$(ROMS_POWER): $(OBJS) $(OBJS_POWER)
	rgblink -n $(ROMS_POWER:.gbc=.sym) -m $(ROMS_POWER:.gbc=.map) -O $(BASEROM_POWER) -o $@ $^
	rgbfix -v -c -i BXTJ -k 2N -l 0x33 -m 0x10 -p 0 -r 3 -t "TELEFANG PW" $@

$(ROMS_SPEED): $(OBJS) $(OBJS_SPEED)
	rgblink -n $(ROMS_SPEED:.gbc=.sym) -m $(ROMS_SPEED:.gbc=.map) -O $(BASEROM_SPEED) -o $@ $^
	rgbfix -v -c -i BTZJ -k 2N -l 0x33 -m 0x10 -p 0 -r 3 -t "TELEFANG SP" $@

# The compare target is a shortcut to check that the build matches the original roms exactly.
# This is for contributors to make sure a change didn't affect the contents of the rom.
# More thorough comparison can be made by diffing the output of hexdump -C against both roms.
compare_power: $(ROMS_POWER) $(BASEROM_POWER)
	cmp $^

compare_speed: $(ROMS_SPEED) $(BASEROM_SPEED)
	cmp $^

# Remove files generated by the build process.
clean:
	rm -f $(ROMS_POWER) $(OBJS) $(OBJS_POWER) $(ROMS_POWER:.gbc=.sym) $(ROMS_POWER:.gbc=.map) $(ROMS_SPEED) $(OBJS_SPEED) $(ROMS_SPEED:.gbc=.sym) $(ROMS_SPEED:.gbc=.map)
	find . \( -iname '*.1bpp' -o -iname '*.2bpp' -o -iname '*.pcm' \) -exec rm {} +

%.2bpp: %.png
	$(eval 2bppq += $<)
	@rm -f $@

%.1bpp: %.png
	$(eval 1bppq += $<)
	@rm -f $@

%.pcm: %.wav
	$(eval pcmq += $<)
	@rm -f $@

